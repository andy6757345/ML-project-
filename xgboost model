import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
import gc
import re

# Load training dataset
train_df = pd.read_csv('train.csv')

# Drop columns with excessive massing values or irrelevant information
train_df = train_df.drop(columns=['trip_ID', 'special_requirements'])
train_df = train_df.dropna(subset=['category'])

# Impute missing values and feature engineering
train_df['female_count'] = train_df['female_count'].fillna(train_df['female_count'].median())
train_df['male_count'] = train_df['male_count'].fillna(train_df['male_count'].median())
train_df['female_to_male_ratio'] = train_df['female_count'] / (train_df['male_count'] + 1)
train_df['total_people'] = train_df['female_count'] + train_df['male_count']

# Handle categorical features
categorical_cols = train_df.select_dtypes(include=['object']).columns
train_df[categorical_cols] = train_df[categorical_cols].fillna('Unknown')
train_df = pd.get_dummies(train_df, columns=categorical_cols, drop_first=True)

# Clean column names to remove any special characters
train_df.columns = [re.sub(r'[<>\[\],]', '', col) for col in train_df.columns]

# Prepare features (X) and target (y)
X = train_df.drop(columns=['category'])
y = train_df['category']

# Scale numerical features
numerical_cols = X.select_dtypes(include=['float64', 'int64']).columns
scaler = StandardScaler()
X[numerical_cols] = scaler.fit_transform(X[numerical_cols])

# Split data
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize XGBClassifier
xgb_model = XGBClassifier(objective='multi:softmax', num_class=3, random_state=42)

# Define parameter grid for RandomizedSearchCV
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [3, 6, 10],
    'learning_rate': [0.01, 0.05, 0.1, 0.2],
    'subsample': [0.6, 0.8, 1.0],
    'colsample_bytree': [0.6, 0.8, 1.0],
    'gamma': [0, 1, 5],
    'reg_alpha': [0, 0.1, 0.5],
    'reg_lambda': [1, 1.5, 2]
}

# Set up RandomizedSearchCV with 3-fold cross-validation
random_search = RandomizedSearchCV(estimator=xgb_model, param_distributions=param_grid, cv=3,
                                   scoring='accuracy', n_jobs=-1, verbose=2, n_iter=20, random_state=42)
random_search.fit(X_train, y_train)

# Evaluate model
best_model = random_search.best_estimator_
y_pred = best_model.predict(X_val)
val_accuracy = accuracy_score(y_val, y_pred)
print(f"Validation Accuracy: {val_accuracy}")
print("Classification Report:\n", classification_report(y_val, y_pred))

# Load and prepare test data
test_df = pd.read_csv('test.csv')
test_df = test_df.drop(columns=['trip_ID', 'special_requirements'])
test_df['female_count'] = test_df['female_count'].fillna(test_df['female_count'].median())
test_df['male_count'] = test_df['male_count'].fillna(test_df['male_count'].median())
test_df['female_to_male_ratio'] = test_df['female_count'] / (test_df['male_count'] + 1)
test_df['total_people'] = test_df['female_count'] + test_df['male_count']
test_df[categorical_cols] = test_df[categorical_cols].fillna('Unknown')
test_df = pd.get_dummies(test_df, columns=categorical_cols, drop_first=True)
test_df.columns = [re.sub(r'[<>\[\],]', '', col) for col in test_df.columns]
test_df = test_df.reindex(columns=X.columns, fill_value=0)
test_df[numerical_cols] = scaler.transform(test_df[numerical_cols])

# Predictions on test data
pred_probs = best_model.predict_proba(test_df)
results = pd.DataFrame({
    'trip_ID': pd.read_csv('test.csv')['trip_ID'],
    'category': np.argmax(pred_probs, axis=1)
})

# Save predictions
results.to_csv('xgboost_predictions.csv', index=False)
gc.collect()
# xgboost accuracy 0.65667
